// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Infrastructure;

#nullable disable

namespace OnlineShop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f05308b9-55ff-4b20-8e57-9a2b89573525",
                            ConcurrencyStamp = "6a840e70-751f-44a2-bde7-1a9203bd2fbf",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "322a7bf2-124a-4ce7-bdf8-43eba64446b5",
                            ConcurrencyStamp = "34c0fce0-db77-42b0-995e-7c3570889786",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Accessory identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasComment("Accessory brand identifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("Accessory Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Accessory Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Accessory Type");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Accessories");

                    b.HasComment("Accessory data entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 5,
                            ImageUrl = "https://i.pinimg.com/564x/f5/7f/c3/f57fc31f3e0629c3ef481e8459e99cf0.jpg",
                            IsActive = true,
                            Name = "Champion winter hat",
                            Price = 30.00m,
                            Quantity = 5,
                            Type = "Hat"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            ImageUrl = "https://i.pinimg.com/564x/90/52/13/905213317d3bed8971d4164f0323fb04.jpg",
                            IsActive = true,
                            Name = "Nike cap",
                            Price = 45.00m,
                            Quantity = 5,
                            Type = "Cap"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            ImageUrl = "https://i.pinimg.com/564x/60/32/b3/6032b3977c6e276780b9b39d89ac705a.jpg",
                            IsActive = true,
                            Name = "Nike Thermo Mask",
                            Price = 50.00m,
                            Quantity = 5,
                            Type = "Mask"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            ImageUrl = "https://i.pinimg.com/564x/e9/b7/ce/e9b7ceb439600eb81285255fa00ce157.jpg",
                            IsActive = true,
                            Name = "Nike long socks",
                            Price = 20.00m,
                            Quantity = 10,
                            Type = "Socks"
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Brand identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Brand Name");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasComment("Brand data entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "LaCoste"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Champion"
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Garment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Garment identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasComment("Garment Brand identifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Color");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Garment Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Garment price");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasComment("Garment Type identifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("Garments");

                    b.HasComment("Garment data entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 3,
                            Color = "DarkBlue",
                            ImageUrl = "https://i.pinimg.com/564x/93/d7/b2/93d7b28cfb66f9daa650559600a0abd1.jpg",
                            IsActive = true,
                            Model = "Zip Sweatshirts",
                            Price = 100.00m,
                            TypeId = 7
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.GarmentSize", b =>
                {
                    b.Property<int>("GarmentId")
                        .HasColumnType("int")
                        .HasComment("Garment identifier");

                    b.Property<int>("SizeId")
                        .HasColumnType("int")
                        .HasComment("Size identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("GarmentSize Quantity");

                    b.HasKey("GarmentId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("GarmentsSizes");

                    b.HasComment("Garment-size entity");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.GarmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Garment type identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Garment type name");

                    b.HasKey("Id");

                    b.ToTable("GarmentsTypes");

                    b.HasComment("Garment type entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tshirt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shirt"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Leggin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pant"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jacket"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Coat"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sweatshirts"
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Order Address");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasComment("Payment method identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("Order phone number");

                    b.Property<decimal>("Pice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order Price");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Order user identifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasComment("Order data entity");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("PaymentMethod identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PaymentType")
                        .HasColumnType("int")
                        .HasComment("Payment Type");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasComment("PaymentMethod entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PaymentType = 2
                        },
                        new
                        {
                            Id = 2,
                            PaymentType = 1
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Shoe identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasComment("Shoe brand identifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Shoe color");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Shoe Model");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Shoe price");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasComment("Shoe type identifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("Shoes");

                    b.HasComment("Shoe data entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Color = "Black and White",
                            ImageUrl = "https://i.pinimg.com/564x/f7/0c/21/f70c21947cf4630a184d9728e7077bdf.jpg",
                            IsActive = true,
                            Model = "Nike Air Max 97",
                            Price = 420.00m,
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.ShoeSize", b =>
                {
                    b.Property<int>("ShoeId")
                        .HasColumnType("int")
                        .HasComment("Shoe identifier");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasComment("Shoe size");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("ShoeSize Quantity");

                    b.HasKey("ShoeId", "Size");

                    b.ToTable("ShoesSizes");

                    b.HasComment("Shoe-size data entity");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.ShoeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Shoe type identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Shoe type name");

                    b.HasKey("Id");

                    b.ToTable("ShoesTypes");

                    b.HasComment("Shoe type entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Basketball shoes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Football shoes"
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Size identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Size Name");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasComment("Size for clothes entities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "S"
                        },
                        new
                        {
                            Id = 2,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "XXXL"
                        });
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.UserOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("OrderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersOrders");

                    b.HasComment("User order entity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Accessory", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Brand", "Brand")
                        .WithMany("Accessories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Garment", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Brand", "Brand")
                        .WithMany("Garments")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.GarmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.GarmentSize", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Garment", "Garment")
                        .WithMany("ClothesSizes")
                        .HasForeignKey("GarmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garment");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Shoe", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Brand", "Brand")
                        .WithMany("Shoes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.ShoeType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.ShoeSize", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Shoe", "Shoe")
                        .WithMany("ShoesSizes")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.UserOrder", b =>
                {
                    b.HasOne("OnlineShop.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("UsersOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineShop.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Brand", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("Garments");

                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Garment", b =>
                {
                    b.Navigation("ClothesSizes");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("UsersOrders");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.Shoe", b =>
                {
                    b.Navigation("ShoesSizes");
                });

            modelBuilder.Entity("OnlineShop.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
